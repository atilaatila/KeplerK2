from astropy.io import fits
import numpy as np
import os, sys
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from matplotlib.animation import FuncAnimation, FFMpegWriter
from matplotlib.animation import PillowWriter
from scipy.ndimage import median_filter
from scipy import stats
from scipy.stats import scoreatpercentile


# Directory path for data
dir_data = 'D:\Kepler Code'
#dir_data = 'D:/Kepler Code/teste'
# a few data to play with on the laptop

# Get the list of FITS files
file_list = [f for f in os.listdir(dir_data) if f.endswith('c03_lpd-targ.fits')]
# Long cadence
# file_list = [f for f in os.listdir(dir_data) if f.endswith('c03_spd-targ.fits')]
# Short cadence
N_file = len(file_list)

# Initialize arrays to store information
N_date_ii = np.zeros(N_file)
col_start = np.zeros(N_file)
row_start = np.zeros(N_file)
N_pix = np.zeros(N_file)

# Loop over the headers to get column and row information
for ii in range(N_file):
    file_name = os.path.join(dir_data, file_list[ii])
    with fits.open(file_name) as hdulist:
        header1 = hdulist[1].header
        header2 = hdulist[2].header

    # From header binary table
    N_date_ii[ii] = header1['NAXIS2']

    # From header image
    col_start[ii] = header2['CRVAL1P']
    row_start[ii] = header2['CRVAL2P']
    N_pix[ii] = header2['NAXIS2']

# Filling up the big array by assembling columns into images
# A big grid to place all the column target pixel files
col_min = min(col_start)
col_max = max(col_start)
N_col = int(col_max - col_min + 1)

row_min = min(row_start)
row_max = max(row_start + N_pix)
N_row = int(row_max - row_min + 1)
N_date = int(max(N_date_ii))
time_time_series = np.zeros((N_date, N_file))
image_time_series_raw = np.zeros((N_row, N_date, N_file))
image_time_series_cor = np.zeros((N_row, N_date, N_file))


# Loop over the files
for ii in range(N_file):
    file_name = os.path.join(dir_data, file_list[ii])
    with fits.open(file_name) as hdulist:
        tab = hdulist[1].data

    # Indices to fill the table
    ind_y_min = int(row_start[ii] - row_min)
    ind_y_max = int(ind_y_min + N_pix[ii])

    # Time table
    t_ii = tab['TIME']  # Assuming TIME column exists in the FITS file
    time_time_series[:, ii] = t_ii

    # Raw data (SAP)
    col_sap_ii = tab['FLUX']  # Assuming FLUX column contains raw data
    image_time_series_raw[ind_y_min:ind_y_max, :, ii] = col_sap_ii.T

    # Corrected data (PDC-SAP)
    #col_pdc_ii = tab['CORRECTED_FLUX']  # Assuming CORRECTED_FLUX column contains corrected data
    image_time_series_cor[ind_y_min:ind_y_max, :, ii] = col_sap_ii.T

time_mean = np.mean(time_time_series, axis=1)

# Some frames are NaN in the PDC-SAP data because they are bad (we checked)
ind_nan = []
ind_good = []
for ii in range(N_date):
    ima_ii = np.squeeze(image_time_series_raw[:, ii, :])
    ind_nan_ii = np.where(np.isnan(ima_ii))[0]
    if len(ind_nan_ii) > 0:
        ind_nan.append(ii)
        print('Hey, this is a NaN frame:', ii)
    else:
        ind_good.append(ii)

N_date_good = len(ind_good)

# New good time series (without NaN frames)
time_mean_good = time_mean[ind_good]
image_time_series_good = image_time_series_raw[:, ind_good, :]



# Calculate percentile-based median
percentile_value = 50  # Adjust as needed 50% would be a normal median
percentile_median = np.zeros((N_row, N_file))
for i in range(N_row):
    for j in range(N_file):
        percentile_median[i, j] = scoreatpercentile(image_time_series_good[i, :, j], percentile_value)

# Apply percentile-based median filtering
for i in range(N_date_good):
    for j in range(N_file):
        image_time_series_good[:, i, j] -= percentile_median[:, j]



#Updated mean and median without NaNs
ima_good_mean = np.mean(image_time_series_good, axis=1)
ima_good_median = np.median(image_time_series_good, axis=1)

#removing median/mean from no-NaN time series
"""for i in range(N_date_good):
    image_time_series_good[:, i, :] -= ima_good_median"""



"""# Define parameters for iterative median
iterations = 2  # Adjust as needed
kernel_size = (2, 2)  # Adjust the size of the neighborhood

# Apply iterative median filtering
for _ in range(iterations):
    for i in range(N_file):
        image_time_series_good[:, i, :] = median_filter(image_time_series_good[:, i, :], size=kernel_size)"""



# Reshaping the array such as time is the last dimension
image_time_series_reshape = np.zeros((N_row, N_file, N_date_good))
"""for ii in range(N_date_good):
    image_time_series_reshape[:, :, ii] = np.squeeze(image_time_series_good[:, ii, :])"""
image_time_series_reshape = np.transpose(image_time_series_good, (0, 2, 1))#better reshape

# Display the mean frame
plt.imshow(ima_good_mean, vmin=0, vmax=50)
plt.title("Mean Frame")
plt.xlabel("Pixel Row")
plt.ylabel("Pixel Column")
plt.colorbar(label="Flux")
plt.show()

# Display the median frame
plt.imshow(ima_good_median, vmin=0, vmax=50)
plt.title("Median Frame")
plt.xlabel("Pixel Row")
plt.ylabel("Pixel Column")
plt.colorbar(label="Flux")
plt.show()



# Display static image
plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
data = image_time_series_reshape[:, :, 0]
plt.imshow(data, vmin=0, vmax=50)
plt.title("Static Image")
plt.xlabel("Pixel Row")
plt.ylabel("Time")
plt.colorbar(label="Flux")
plt.show()

"""# Display static image with removed background stars for a specific frame (e.g., frame 0)
static_frame = 0
static_image_cleaned = image_time_series_good[:, :, static_frame] - ima_good_median

plt.imshow(static_image_cleaned, vmin=0, vmax=50, aspect='auto', origin='lower')
plt.title(f"Static Image with Removed Background Stars - Frame {static_frame}")
plt.xlabel("Pixel Row")
plt.ylabel("Time")
plt.colorbar(label="Flux")
plt.show()"""



# Create a figure and axis for the cleaned animation
fig_cleaned, ax_cleaned = plt.subplots(figsize=(7.00, 3.50))
ax_cleaned.set_xticks([])
ax_cleaned.set_yticks([])
ax_cleaned.grid(False)

# Function to update the plot for each frame in the cleaned animation
def update_cleaned(frame):
    if frame < image_time_series_reshape.shape[2]:  # Ensure the frame is within the valid range
        print(f"Updating frame {frame}")
        frame_data_cleaned = image_time_series_reshape[:, :, frame]

        ax_cleaned.clear()
        ax_cleaned.imshow(frame_data_cleaned, cmap='viridis', origin='lower', vmin=0, vmax=50, aspect='auto')
        ax_cleaned.set_title(f"Frame {frame} - Cleaned")
        ax_cleaned.set_xlabel("Pixel Row")
        ax_cleaned.set_ylabel("Time")
        ax_cleaned.set_xticks([])
        ax_cleaned.set_yticks([])
        ax_cleaned.grid(False)

# Create the cleaned animation and set the speed
animation_cleaned = FuncAnimation(fig_cleaned, update_cleaned, frames=image_time_series_reshape.shape[2], interval=100)

# Specify the writer explicitly to handle the .gif extension
save_path_cleaned = 'image_time_series_animation_cleaned.gif'
writer_cleaned = PillowWriter(fps=50)  # Adjust the fps for desired speed
animation_cleaned.save(save_path_cleaned, writer=writer_cleaned)

plt.show()